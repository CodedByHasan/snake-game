import sys
import os
import pytest

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../src")))

from snake_game.food import Food


@pytest.fixture
def food():
    return Food()


def test_food_init(food):
    assert food.shape() == "circle"
    assert food.speed() == 0  # fastest
    assert food.color() == ("green", "green")
    assert food.shapesize() == (0.5, 0.5, 1)
    assert food.isvisible() is True


def test_food_refresh(food, monkeypatch):
    # Mock random values generated by random.randint
    random_x = 100
    random_y = 150

    # Mock the random.randint function
    def mock_randint(min_value, max_value):
        # Return mock values based on the call order
        return random_x, random_y

    # Apply the monkeypatch to the random.randint function
    monkeypatch.setattr("random.randint", mock_randint)

    # Create a mock for the goto method
    with monkeypatch.context() as m:
        # Replace the `goto` method on the food object with a
        # mock lamda function
        mock_goto = m.setattr(food, "goto", lambda x, y: (x, y))

        # Call the refresh method, which should use the mocked random values
        food.refresh()

        # Check if the mock_goto was called with the correct arguments
        assert food.goto(random_x, random_y) == (random_x, random_y)
